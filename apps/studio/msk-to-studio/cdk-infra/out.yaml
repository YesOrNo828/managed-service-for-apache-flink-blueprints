Parameters:
  lambdaZipsS3Bucket:
    Type: String
    Default: ""
    Description: The S3 bucket containing lambda zips
  studioAppName:
    Type: String
    Default: ""
    Description: The name of the KDA Studio app
  runtimeEnvironment:
    Type: String
    Default: FLINK-1_13
    Description: Runtime environment (FLINK-1_13, etc...)
  glueDatabaseName:
    Type: String
    Default: kda-default-catalog
    Description: The Glue catalog that will be used w/ Kinesis Data Analytics Studio
  zepFlinkVersion:
    Type: String
    Default: 1.13.2
    Description: Flink Version for KDA Studio (1.13.2, etc...)
  kdaLogGroup:
    Type: String
    Default: ktKDALogGroup
    Description: The log group name for the KDA studio app
  studioLogStream:
    Type: String
    Default: ""
    Description: The log stream name for the KDA studio app
  mskClusterName:
    Type: String
    Default: myMSKClusterForZep
    Description: The MSK Serverless cluster name
  sourceTopicName:
    Type: String
    Default: sourceTopic
    Description: The source topic name
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/Resource
  VPCpublicsubnet1Subnet1Subnet39B927A0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public-subnet-1
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1/Subnet
  VPCpublicsubnet1Subnet1RouteTable1127E157:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1/RouteTable
  VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCpublicsubnet1Subnet1RouteTable1127E157
      SubnetId:
        Ref: VPCpublicsubnet1Subnet1Subnet39B927A0
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1/RouteTableAssociation
  VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCpublicsubnet1Subnet1RouteTable1127E157
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1/DefaultRoute
  VPCpublicsubnet1Subnet1EIP36DFE85A:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1/EIP
  VPCpublicsubnet1Subnet1NATGatewayB023E80E:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCpublicsubnet1Subnet1Subnet39B927A0
      AllocationId:
        Fn::GetAtt:
          - VPCpublicsubnet1Subnet1EIP36DFE85A
          - AllocationId
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1
    DependsOn:
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet1/NATGateway
  VPCpublicsubnet1Subnet2Subnet1B74FFEC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public-subnet-1
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet2
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet2/Subnet
  VPCpublicsubnet1Subnet2RouteTable6613D6DE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet2
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet2/RouteTable
  VPCpublicsubnet1Subnet2RouteTableAssociation4859253B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCpublicsubnet1Subnet2RouteTable6613D6DE
      SubnetId:
        Ref: VPCpublicsubnet1Subnet2Subnet1B74FFEC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet2/RouteTableAssociation
  VPCpublicsubnet1Subnet2DefaultRoute3D53F956:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCpublicsubnet1Subnet2RouteTable6613D6DE
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/public-subnet-1Subnet2/DefaultRoute
  VPCprivateSubnet1SubnetE522290D:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet1
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet1/Subnet
  VPCprivateSubnet1RouteTable41566AF9:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet1
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet1/RouteTable
  VPCprivateSubnet1RouteTableAssociation43FE0C59:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCprivateSubnet1RouteTable41566AF9
      SubnetId:
        Ref: VPCprivateSubnet1SubnetE522290D
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet1/RouteTableAssociation
  VPCprivateSubnet1DefaultRoute68B79172:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCprivateSubnet1RouteTable41566AF9
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCpublicsubnet1Subnet1NATGatewayB023E80E
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet1/DefaultRoute
  VPCprivateSubnet2Subnet2F4D9530:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet2
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet2/Subnet
  VPCprivateSubnet2RouteTableBBE8BB2B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet2
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet2/RouteTable
  VPCprivateSubnet2RouteTableAssociation45BBC356:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCprivateSubnet2RouteTableBBE8BB2B
      SubnetId:
        Ref: VPCprivateSubnet2Subnet2F4D9530
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet2/RouteTableAssociation
  VPCprivateSubnet2DefaultRouteD808B206:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCprivateSubnet2RouteTableBBE8BB2B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCpublicsubnet1Subnet1NATGatewayB023E80E
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/privateSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CdkInfraKdaKafkaToS3Stack/VPC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/VPC/VPCGW
  mskSG34C4C38F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MSK Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/mskSG/Resource
  mskSGfromCdkInfraKdaKafkaToS3StackmskSG0E98C6F0ALLTRAFFIC21D6B74D:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: "-1"
      Description: Allow all traffic between hosts having the same security group
      GroupId:
        Fn::GetAtt:
          - mskSG34C4C38F
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - mskSG34C4C38F
          - GroupId
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/mskSG/from CdkInfraKdaKafkaToS3StackmskSG0E98C6F0:ALL TRAFFIC
  KDALogGroup96FD9162:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: kdaLogGroup
      RetentionInDays: 731
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/KDALogGroup/Resource
  KDALogStream92821398:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: KDALogGroup96FD9162
      LogStreamName: ""
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/KDALogStream/Resource
  SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableAssociation45BBC356
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/ServiceRole/Resource
  SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleDefaultPolicyEED0B067:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kafka-cluster:*Topic*
              - kafka-cluster:Connect
              - kafka-cluster:CreateTopic
              - kafka-cluster:DeleteTopic
              - kafka-cluster:DescribeTopic
              - kafka-cluster:ReadData
              - kafka-cluster:WriteData
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:kafka:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :cluster/
                    - Ref: mskClusterName
                    - /*
              - Fn::Join:
                  - ""
                  - - "arn:aws:kafka:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :topic/
                    - Ref: mskClusterName
                    - /*
        Version: "2012-10-17"
      PolicyName: SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleDefaultPolicyEED0B067
      Roles:
        - Ref: SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04
    DependsOn:
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableAssociation45BBC356
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/ServiceRole/DefaultPolicy/Resource
  SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref lambdaZipsS3Bucket
        S3Key: 6530802f1434b6a0b5586d1906c8b9ca8c919914e9039da73f1e32a05e65984c.jar
      Role:
        Fn::GetAtt:
          - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04
          - Arn
      Handler: com.amazonaws.TopicGenHandler
      MemorySize: 1024
      Runtime: java11
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - mskSG34C4C38F
              - GroupId
        SubnetIds:
          - Ref: VPCprivateSubnet1SubnetE522290D
          - Ref: VPCprivateSubnet2Subnet2F4D9530
    DependsOn:
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleDefaultPolicyEED0B067
      - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebcServiceRoleFE9ABB04
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableAssociation45BBC356
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc/Resource
      aws:asset:path: asset.6530802f1434b6a0b5586d1906c8b9ca8c919914e9039da73f1e32a05e65984c.jar
      aws:asset:is-bundled: false
      aws:asset:property: Code
  SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRole37026ADF:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableAssociation45BBC356
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9/ServiceRole/Resource
  SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRoleDefaultPolicy1C9B6856:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kafka-cluster:*Topic*
              - kafka-cluster:Connect
              - kafka-cluster:CreateTopic
              - kafka-cluster:DeleteTopic
              - kafka-cluster:DescribeTopic
              - kafka-cluster:ReadData
              - kafka-cluster:WriteData
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:kafka:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :cluster/
                    - Ref: mskClusterName
                    - /*
              - Fn::Join:
                  - ""
                  - - "arn:aws:kafka:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :topic/
                    - Ref: mskClusterName
                    - /*
        Version: "2012-10-17"
      PolicyName: SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRoleDefaultPolicy1C9B6856
      Roles:
        - Ref: SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRole37026ADF
    DependsOn:
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableAssociation45BBC356
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9/ServiceRole/DefaultPolicy/Resource
  SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9AA10F374:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref lambdaZipsS3Bucket
        S3Key: 6530802f1434b6a0b5586d1906c8b9ca8c919914e9039da73f1e32a05e65984c.jar
      Role:
        Fn::GetAtt:
          - SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRole37026ADF
          - Arn
      Handler: com.amazonaws.MSKDataGenHandler
      MemorySize: 1024
      Runtime: java11
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - mskSG34C4C38F
              - GroupId
        SubnetIds:
          - Ref: VPCprivateSubnet1SubnetE522290D
          - Ref: VPCprivateSubnet2Subnet2F4D9530
    DependsOn:
      - SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRoleDefaultPolicy1C9B6856
      - SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9ServiceRole37026ADF
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableAssociation45BBC356
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambdae0d4f3404ee111e89c2dfa7ae01d3fb9/Resource
      aws:asset:path: asset.6530802f1434b6a0b5586d1906c8b9ca8c919914e9039da73f1e32a05e65984c.jar
      aws:asset:is-bundled: false
      aws:asset:property: Code
  MSKServerlessSourceMSKServerlessCluster10E0DC24:
    Type: AWS::MSK::ServerlessCluster
    Properties:
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: true
      ClusterName:
        Ref: mskClusterName
      VpcConfigs:
        - SecurityGroups:
            - Fn::GetAtt:
                - mskSG34C4C38F
                - GroupId
          SubnetIds:
            - Ref: VPCprivateSubnet1SubnetE522290D
            - Ref: VPCprivateSubnet2Subnet2F4D9530
    DependsOn:
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/MSKServerlessSource/MSKServerlessCluster
  MSKServerlessSourceBootstrapBrokersServerlessLookup66B3899B:
    Type: Custom::AWS
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd22872D164C4C
          - Arn
      Create:
        Fn::Join:
          - ""
          - - '{"service":"Kafka","action":"getBootstrapBrokers","parameters":{"ClusterArn":"'
            - Fn::GetAtt:
                - MSKServerlessSourceMSKServerlessCluster10E0DC24
                - Arn
            - '"},"region":"'
            - Ref: AWS::Region
            - '","physicalResourceId":{"id":"1684435618396"}}'
      Update:
        Fn::Join:
          - ""
          - - '{"service":"Kafka","action":"getBootstrapBrokers","parameters":{"ClusterArn":"'
            - Fn::GetAtt:
                - MSKServerlessSourceMSKServerlessCluster10E0DC24
                - Arn
            - '"},"region":"'
            - Ref: AWS::Region
            - '","physicalResourceId":{"id":"1684435618396"}}'
      InstallLatestAwsSdk: true
    DependsOn:
      - MSKServerlessSourceBootstrapBrokersServerlessLookupCustomResourcePolicy3DCC6523
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/MSKServerlessSource/BootstrapBrokersServerlessLookup/Resource/Default
  MSKServerlessSourceBootstrapBrokersServerlessLookupCustomResourcePolicy3DCC6523:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: kafka:GetBootstrapBrokers
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: MSKServerlessSourceBootstrapBrokersServerlessLookupCustomResourcePolicy3DCC6523
      Roles:
        - Ref: AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
    DependsOn:
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/MSKServerlessSource/BootstrapBrokersServerlessLookup/CustomResourcePolicy/Resource
  MSKServerlessSourceTopicCreationResource2838C4AE:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambdaf7d4f7304ee111e89c2dfa7ae01bbebc492C6E5C
          - Arn
      Broker:
        Fn::GetAtt:
          - MSKServerlessSourceBootstrapBrokersServerlessLookup66B3899B
          - BootstrapBrokerStringSaslIam
      Topic:
        Ref: sourceTopicName
      NumPartitions: 3
      ReplicationFactor: 2
    DependsOn:
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/MSKServerlessSource/TopicCreationResource/Default
  AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/Resource
  AWS679f53fac002430cb0da5b7982bd22872D164C4C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref lambdaZipsS3Bucket
        S3Key: a9d3d4d1afa000946b9863b3e7578a5a5ad86d88274b3639938aa2baebf822ce.zip
      Role:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 120
    DependsOn:
      - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/AWS679f53fac002430cb0da5b7982bd2287/Resource
      aws:asset:path: asset.a9d3d4d1afa000946b9863b3e7578a5a5ad86d88274b3639938aa2baebf822ce
      aws:asset:is-bundled: false
      aws:asset:property: Code
  kdaapprole5B065BF4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
        Version: "2012-10-17"
      Description: KDA app role
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kafka-cluster:AlterGroup
                  - kafka-cluster:Connect
                  - kafka-cluster:CreateTopic
                  - kafka-cluster:DescribeGroup
                  - kafka-cluster:DescribeTopic
                  - kafka-cluster:ReadData
                  - kafka-cluster:WriteData
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:kafka:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :cluster/
                        - Ref: mskClusterName
                        - /*
                  - Fn::Join:
                      - ""
                      - - "arn:aws:kafka:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :topic/
                        - Ref: mskClusterName
                        - /*
            Version: "2012-10-17"
          PolicyName: AccessMSKPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - kafka-cluster:AlterGroup
                  - kafka-cluster:CreateTopic
                  - kafka-cluster:DescribeGroup
                  - kafka-cluster:DescribeTopic
                  - kafka-cluster:ReadData
                  - kafka-cluster:WriteData
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:kafka:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :topic/
                      - Ref: mskClusterName
                      - /*
            Version: "2012-10-17"
          PolicyName: AccessMSKTopicsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:ktKDALogGroup:*
            Version: "2012-10-17"
          PolicyName: AccessCWLogsPolicy
        - PolicyDocument:
            Statement:
              - Action: cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: AccessCWMetricsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: AccessVPCPolicy
        - PolicyDocument:
            Statement:
              - Action: kinesisanalytics:DescribeApplication
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: KDAAccessPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - glue:*Database*
                  - glue:*Table*
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:glue:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :catalog
                  - Fn::Join:
                      - ""
                      - - "arn:aws:glue:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :database/kda-default-catalog
                  - Fn::Join:
                      - ""
                      - - "arn:aws:glue:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :table/kda-default-catalog/*
            Version: "2012-10-17"
          PolicyName: GlueAccessPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - glue:GetDatabase
                  - glue:GetPartitions
                  - glue:GetUserDefinedFunction
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: GlueGetDBAccessPolicy
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/kda-app-role/Resource
  GlueDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Name:
          Ref: glueDatabaseName
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/GlueDB
  ZepLogStream6D451A4A:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: KDALogGroup96FD9162
      LogStreamName:
        Ref: studioLogStream
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/ZepLogStream/Resource
  KDAZepConstructKDAZepAppE7AEE2C9:
    Type: AWS::KinesisAnalyticsV2::Application
    Properties:
      RuntimeEnvironment: ZEPPELIN-FLINK-2_0
      ServiceExecutionRole:
        Fn::GetAtt:
          - kdaapprole5B065BF4
          - Arn
      ApplicationConfiguration:
        FlinkApplicationConfiguration:
          ParallelismConfiguration:
            AutoScalingEnabled: false
            ConfigurationType: CUSTOM
            Parallelism: 2
            ParallelismPerKPU: 1
        VpcConfigurations:
          - SecurityGroupIds:
              - Fn::GetAtt:
                  - mskSG34C4C38F
                  - GroupId
            SubnetIds:
              - Ref: VPCprivateSubnet1SubnetE522290D
              - Ref: VPCprivateSubnet2Subnet2F4D9530
        ZeppelinApplicationConfiguration:
          CatalogConfiguration:
            GlueDataCatalogConfiguration:
              DatabaseARN:
                Fn::Join:
                  - ""
                  - - "arn:aws:glue:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :database/
                    - Ref: glueDatabaseName
          CustomArtifactsConfiguration:
            - ArtifactType: DEPENDENCY_JAR
              MavenReference:
                ArtifactId: flink-connector-kafka_2.12
                GroupId: org.apache.flink
                Version: 1.13.2
            - ArtifactType: DEPENDENCY_JAR
              MavenReference:
                ArtifactId: flink-sql-connector-kinesis_2.12
                GroupId: org.apache.flink
                Version: 1.13.2
            - ArtifactType: DEPENDENCY_JAR
              MavenReference:
                ArtifactId: aws-msk-iam-auth
                GroupId: software.amazon.msk
                Version: 1.1.0
          MonitoringConfiguration:
            LogLevel: INFO
      ApplicationMode: INTERACTIVE
      ApplicationName:
        Ref: studioAppName
    DependsOn:
      - kdaapprole5B065BF4
      - KDALogGroup96FD9162
      - MSKServerlessSourceBootstrapBrokersServerlessLookupCustomResourcePolicy3DCC6523
      - MSKServerlessSourceBootstrapBrokersServerlessLookup66B3899B
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - MSKServerlessSourceTopicCreationResource2838C4AE
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
      - ZepLogStream6D451A4A
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/KDAZepConstruct/KDAZepApp
  KDAZepConstructKDAZepCWLogsAEE1D79E:
    Type: AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption
    Properties:
      ApplicationName:
        Ref: studioAppName
      CloudWatchLoggingOption:
        LogStreamARN:
          Fn::Join:
            - ""
            - - "arn:aws:logs:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":log-group:"
              - Ref: KDALogGroup96FD9162
              - ":log-stream:"
              - Ref: ZepLogStream6D451A4A
    DependsOn:
      - kdaapprole5B065BF4
      - KDALogGroup96FD9162
      - KDAZepConstructKDAZepAppE7AEE2C9
      - MSKServerlessSourceBootstrapBrokersServerlessLookupCustomResourcePolicy3DCC6523
      - MSKServerlessSourceBootstrapBrokersServerlessLookup66B3899B
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - MSKServerlessSourceTopicCreationResource2838C4AE
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
      - ZepLogStream6D451A4A
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/KDAZepConstruct/KDAZepCWLogs
  KDAZepConstructAppStartLambdaResource615CF627:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebc23F25B66
          - Arn
      AppName:
        Ref: studioAppName
    DependsOn:
      - kdaapprole5B065BF4
      - KDALogGroup96FD9162
      - KDAZepConstructKDAZepAppE7AEE2C9
      - KDAZepConstructKDAZepCWLogsAEE1D79E
      - MSKServerlessSourceBootstrapBrokersServerlessLookupCustomResourcePolicy3DCC6523
      - MSKServerlessSourceBootstrapBrokersServerlessLookup66B3899B
      - MSKServerlessSourceMSKServerlessCluster10E0DC24
      - MSKServerlessSourceTopicCreationResource2838C4AE
      - VPCIGWB7E252D3
      - VPCprivateSubnet1DefaultRoute68B79172
      - VPCprivateSubnet1RouteTable41566AF9
      - VPCprivateSubnet1RouteTableAssociation43FE0C59
      - VPCprivateSubnet1SubnetE522290D
      - VPCprivateSubnet2DefaultRouteD808B206
      - VPCprivateSubnet2RouteTableBBE8BB2B
      - VPCprivateSubnet2RouteTableAssociation45BBC356
      - VPCprivateSubnet2Subnet2F4D9530
      - VPCpublicsubnet1Subnet1DefaultRouteEFD0DA69
      - VPCpublicsubnet1Subnet1EIP36DFE85A
      - VPCpublicsubnet1Subnet1NATGatewayB023E80E
      - VPCpublicsubnet1Subnet1RouteTable1127E157
      - VPCpublicsubnet1Subnet1RouteTableAssociation99DE76A6
      - VPCpublicsubnet1Subnet1Subnet39B927A0
      - VPCpublicsubnet1Subnet2DefaultRoute3D53F956
      - VPCpublicsubnet1Subnet2RouteTable6613D6DE
      - VPCpublicsubnet1Subnet2RouteTableAssociation4859253B
      - VPCpublicsubnet1Subnet2Subnet1B74FFEC
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
      - ZepLogStream6D451A4A
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/KDAZepConstruct/AppStartLambdaResource/Default
  SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleC4EDB0F7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebc/ServiceRole/Resource
  SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleDefaultPolicy5912ADA5:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kinesisanalytics:DescribeApplication
              - kinesisanalytics:StartApplication
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleDefaultPolicy5912ADA5
      Roles:
        - Ref: SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleC4EDB0F7
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebc/ServiceRole/DefaultPolicy/Resource
  SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebc23F25B66:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "


          import json

          import logging

          import signal

          import urllib.request

          import urllib.parse

          import uuid

          import boto3


          LOGGER = logging.getLogger()

          LOGGER.setLevel(logging.INFO)


          def handler(event, context):

          \    '''Handle Lambda event from AWS'''

          \    # Setup alarm for remaining runtime minus a second

          \    signal.alarm(10000)

          \    try:

          \        LOGGER.info('REQUEST RECEIVED: %s', event)

          \        LOGGER.info('REQUEST RECEIVED: %s', context)

          \        if event['RequestType'] == 'Create':

          \            LOGGER.info('In create')

          \            start_app(event['ResourceProperties']['AppName'])

          \            send_response(event, context, \"SUCCESS\",

          \                            {\"Message\": \"Resource creation successful!\"})

          \        elif event['RequestType'] == 'Update':

          \            LOGGER.info('In update')

          \            start_app(event['ResourceProperties']['AppName'])

          \            send_response(event, context, \"SUCCESS\",

          \                            {\"Message\": \"Resource update successful!\"})

          \        elif event['RequestType'] == 'Delete':

          \            LOGGER.info('In delete')

          \            send_response(event, context, \"SUCCESS\",

          \                            {\"Message\": \"Resource deletion successful!\"})

          \        else:

          \            LOGGER.info('Failure!')

          \            send_response(event, context, \"FAILED\",

          \                            {\"Message\": \"Unexpected event received from CloudFormation\"})

          \    except: #pylint: disable=W0702

          \        LOGGER.info('FAILED!')

          \        send_response(event, context, \"FAILED\", {

          \            \"Message\": \"Exception during processing\"})



          def start_app(appName):

          \    client = boto3.client('kinesisanalyticsv2')

          \    try:

          \        desc_response = client.describe_application(ApplicationName=appName)

          \        status = desc_response['ApplicationDetail']['ApplicationStatus']

          \        if status == \"READY\":

          \        client.start_application(ApplicationName=appName)

          \        else:

          \        print(\"Status is not READY; not attempting to start app\")


          \        while(True):

          \        desc_response = client.describe_application(ApplicationName=appName)

          \        status = desc_response['ApplicationDetail']['ApplicationStatus']

          \        if status != \"STARTING\":

          \            print(\"App status: \" + status)

          \            break

          \        else:

          \            time.sleep(1)

          \    except Exception as e:

          \        print(str(e))



          def send_response(event, context, response_status, response_data):

          \    physicalResourceId = \"app-start-lambda-\" + str(uuid.uuid4())


          \    '''Send a response to CloudFormation'''

          \    response_body = {

          \        \"Status\": response_status,

          \        \"Reason\": \"See the details in CloudWatch Log Stream: \",

          \        \"PhysicalResourceId\": physicalResourceId,

          \        \"StackId\": event['StackId'],

          \        \"RequestId\": event['RequestId'],

          \        \"LogicalResourceId\": event['LogicalResourceId'],

          \        \"Data\": response_data

          \    }


          \    data = json.dumps(response_body).encode()


          \    LOGGER.info('ResponseURL: %s', event['ResponseURL'])

          \    LOGGER.info('ResponseBody: %s', data)


          \    headers = {

          \        'content-Type': '',

          \        'content-Length': str(len(data))

          \    }


          \    url = event['ResponseURL']

          \    req = urllib.request.Request(url, data=data, headers=headers, method='PUT')

          \    with urllib.request.urlopen(req) as f:

          \        LOGGER.info(f.read().decode())



          def timeout_handler(_signal, _frame):

          \    '''Handle SIGALRM'''

          \    raise Exception('Time exceeded')



          signal.signal(signal.SIGALRM, timeout_handler)

          \                  "
      Role:
        Fn::GetAtt:
          - SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleC4EDB0F7
          - Arn
      Handler: index.handler
      MemorySize: 1024
      Runtime: python3.8
      Timeout: 300
    DependsOn:
      - SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleDefaultPolicy5912ADA5
      - SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebcServiceRoleC4EDB0F7
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/SingletonLambda97e4f7304ee111e83c2dfa7ae01b6ebc/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31STW/bMAz9Lb0rWj+AbtfUW4sARWskQ3cMaJl1VcuSIVIJAiP/vZSdOsUOPfHxkbTfI3Wtf97qywvY08LU7cLZSg8bBtOq4tWXEKFDxqikvh3QXOvhpTe59FIWqkyVs2aTKo+cuTNah8T4FyqHZ/7MLYmCscA2+Lk5gz+rMocn4Adg3MNBldHuBJ4/vPKiRvBnw6TklC1ZhL916Flt0KRo+fAQQ+pHDd8SK99EJDoqFxrSw2No5r4ZC9hwROhO7JTICHRVDbI16xuHHPx98mb0NgMZ+MRHZaHTwzpMqxljGWSNo5cJHRXdbIEImfQyB8n1XTIt8h0Qqo5aPTqIO4xOdBcuUb5S4xLmym9gqHJnaz2SJfDgDmwN7eSAUl/2vfxnPsCXtHAh1f+AzZs4bMTRcz+qPqo1UkjRoBoVyRPJ1Tz9nLhPrIxICN02ntpE+Z6KkZsn/0/F/hdcBF/baUU+1Kjf6cfu6pfOr/OdrF3E5Nl2qNdT/ADCKkltuQIAAA==
    Metadata:
      aws:cdk:path: CdkInfraKdaKafkaToS3Stack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  MSKServerlessSourceClusterArnServerlessOutputFC7C9F37:
    Description:
      Fn::Join:
        - ""
        - - "The ARN of our serverless MSK cluste: "
          - Ref: mskClusterName
    Value:
      Fn::GetAtt:
        - MSKServerlessSourceMSKServerlessCluster10E0DC24
        - Arn
    Export:
      Name:
        Fn::Join:
          - ""
          - - ServerlessMSKClusterARN-
            - Ref: mskClusterName
  MSKServerlessSourceServerlessBootstrapServersOutputFA7433FA:
    Description:
      Fn::Join:
        - ""
        - - "List of bootstrap servers for our Serverless MSK cluster - "
          - Ref: mskClusterName
    Value:
      Fn::GetAtt:
        - MSKServerlessSourceBootstrapBrokersServerlessLookup66B3899B
        - BootstrapBrokerStringSaslIam
    Export:
      Name:
        Fn::Join:
          - ""
          - - ServerlessMSKBootstrapServers-
            - Ref: mskClusterName
  MSKServerlessSourceTopicCreationResponseOutput303074CA:
    Value:
      Fn::GetAtt:
        - MSKServerlessSourceTopicCreationResource2838C4AE
        - Response
    Export:
      Name: MSKTopicCreationResponse
  MSKServerlessSourceTopicName118DA6B2:
    Value:
      Fn::GetAtt:
        - MSKServerlessSourceTopicCreationResource2838C4AE
        - TopicName
    Export:
      Name: MSKTopicName
  KDAZepConstructAppStartResponseOutput4AA5A8F3:
    Value:
      Fn::GetAtt:
        - KDAZepConstructAppStartLambdaResource615CF627
        - Response
    Export:
      Name: AppStartResponse
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

